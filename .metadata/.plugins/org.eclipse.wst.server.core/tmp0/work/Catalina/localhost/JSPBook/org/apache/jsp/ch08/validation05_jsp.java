/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.31
 * Generated at: 2025-02-06 08:42:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ch08;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class validation05_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	function checkMember() {\r\n");
      out.write("		var regExpId = /^[a-z|A-Z|ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/;\r\n");
      out.write("		var regExpName = /^[가-힣]*$/;\r\n");
      out.write("		var regExpPasswd = /^[0-9]*$/;\r\n");
      out.write("		var regExpPhone = /^\\d{3}-\\d{3,4}-\\d{4}$/;\r\n");
      out.write("		var regExpEmail = /^[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i;\r\n");
      out.write("		\r\n");
      out.write("		var form = document.Member;\r\n");
      out.write("		\r\n");
      out.write("		var id = form.id.value;\r\n");
      out.write("		var name = form.name.value;\r\n");
      out.write("		var passwd = form.passwd.value;\r\n");
      out.write("		var phone = form.phone1.value + \"-\" + form.phone2.value + \"-\" + form.phone3.value;\r\n");
      out.write("		var email = form.email.value;\r\n");
      out.write("			\r\n");
      out.write("		if(!regExpId.test(id)){\r\n");
      out.write("			alert(\"아이디는 문자로 시작해주세요.\");\r\n");
      out.write("			form.id.select();\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		if(!regExpName.test(name)){\r\n");
      out.write("			alert(\"이름은 한글만 입력해주세요!\");\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		if(!regExpPasswd.test(passwd)){\r\n");
      out.write("			alert(\"비밀번호는 숫자만 입력해주세요!\");\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		if(!regExpPhone.test(phone)){\r\n");
      out.write("			alert(\"연락처 입력을 확인해주세요!\");\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		if(!regExpEmail.test(email)){\r\n");
      out.write("			alert(\"이메일 입력을 확인해주세요!\");\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		form.submit();\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("	<h3>회원 가입</h3>\r\n");
      out.write("	<form action=\"validation05_process.jsp\" method=\"post\" name=\"Member\">\r\n");
      out.write("		<p> 아이디 : <input type=\"text\" name=\"id\">\r\n");
      out.write("		<p> 비밀번호 : <input type=\"password\" name=\"passwd\">\r\n");
      out.write("		<p> 이름 : <input type=\"text\" name=\"name\">\r\n");
      out.write("		<p> 연락처 : <select name=\"phone1\">\r\n");
      out.write("					<option value=\"010\">010</option>\r\n");
      out.write("					<option value=\"011\">011</option>\r\n");
      out.write("					<option value=\"016\">016</option>\r\n");
      out.write("					<option value=\"017\">017</option>\r\n");
      out.write("					<option value=\"019\">019</option>\r\n");
      out.write("				</select> - \r\n");
      out.write("				<input type=\"text\" maxlength=\"4\" size=\"4\" name=\"phone2\"> -\r\n");
      out.write("				<input type=\"text\" maxlength=\"4\" size=\"4\" name=\"phone3\">\r\n");
      out.write("		<p> 이메일 : <input type=\"text\" name=\"email\">\r\n");
      out.write("		<p> <input type=\"button\" value=\"가입하기\" onclick=\"checkMember()\">\r\n");
      out.write("	</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
